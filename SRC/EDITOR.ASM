
	INCLUDE	BIOS.INC
	INCLUDE	SHIKE2.INC
	INCLUDE	EVENT.INC
	INCLUDE	LEVEL.INC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	EDINIT
	EXTRN	VLDIR,LDLEVEL,DELSPR,MOUSE,MSCLR,CLRVPAGE,FONTGR5
	EXTRN	GETLEVEL,PUTLPAGE,GETPAL,SETPAL,LDPATSET

EDINIT:	LD	A,EDPAGE
	LD	(DPPAGE),A
	LD	(ACPAGE),A
	CALL	DELSPR			;CLEAN SPRITES IN SCREEN
	LD	E,EDPAGE
	CALL	CLRVPAGE
	LD	A,1			;ENABLE MOUSE
	CALL	MOUSE
	CALL	MSCLR			;CLEAN MOUSE QUEUE
	LD	DE,(EDLEVEL)
	PUSH	DE
	CALL	LDLEVEL

	CALL	PUTLPAGE
	LD	HL,FONTGR5
	LD	DE,128*(FONTY-128)
	LD	BC,8*128
	LD	A,FONTPAGE*2+1
	CALL	VLDIR			;COPY FONTS TO VRAM

	POP	DE			;INITIALIZE THE EDITOR VARIABLES
	CALL	GETLEVEL		;FROM THE LEVEL DATA
	RET	Z

	PUSH	HL
	POP	IY
	LD	E,(IY+LVL.PAL)		;SET LEVEL PALETE
	CALL	GETPAL
	CALL	SETPAL
	LD	E,(IY+LVL.GFX)
	JP	LDPATSET		;SET LEVEL GRAPHIC SET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: A = EVENT
;       DE = HELP MESSAGE

	CSEG
	PUBLIC	SHOWHLP
	EXTRN	PSELECT,CLS,PUTS,KBDCLR,DISSPR,ENASPR,VDPSYNC

SHOWHLP:
	PUSH	DE
	CALL	DISSPR
	CALL	CLS
	LD	DE,COMMON
	CALL	PUTS
	POP	DE
	CALL	PUTS
	LD	DE,PUSH
	CALL	PUTS
	CALL	KBDCLR
	CALL	VDPSYNC
	CALL	PSELECT
	JP	ENASPR

COMMON:	DB	"ESC      - RETURN TO PREVIOUS MENU",0AH
	DB	"F1       - THIS HELP",0AH
	DB	0

PUSH:	DB	"--PUSH ANY KEY--"
	DB	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = SCREEN POSITION

	CSEG
	PUBLIC	GRIDPOS

GRIDPOS:LD	A,E
	SUB	10H
	AND	0F0H
	RRCA
	RRCA
	RRCA
	RRCA
	LD	E,A

	LD	A,D
	SUB	10H
	AND	0F0H
	RRCA
	RRCA
	RRCA
	RRCA
	LD	D,A
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = DESTINE BUFFER
;	BC = CALLBACK FUNCTION

	CSEG
	PUBLIC	ADDGLISTEN

ADDGLISTEN:
	LD	(A.FUN),BC
	EX	DE,HL
	LD	DE,1010H
	LD	B,LVLYSIZ

A.LOOPY:PUSH	BC
	PUSH	DE
	LD	B,LVLXSIZ

A.LOOPX:PUSH	DE
	LD	(HL),D
	INC	HL
	LD	(HL),16
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),16
	INC	HL
	LD	DE,(A.FUN)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	POP	DE
	LD	A,D
	ADD	A,16
	LD	D,A
	DJNZ	A.LOOPX

	POP	DE
	LD	A,E
	ADD	A,16
	LD	E,A
	POP	BC
	DJNZ	A.LOOPY
	RET

	DSEG
A.FUN:	DW	0




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = ROOM LOCATION

	CSEG
	PUBLIC	COLORGRID16
	EXTRN	LMMV

COLORGRID16:
	LD	A,D
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,16
	INC	A
	LD	D,A
	LD	A,E
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,16
	INC	A
	LD	E,A

	LD	BC,0F0FH
	LD	A,14
	LD	(FORCLR),A
	JP	LMMV

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	GRID16
	EXTRN	LINE

GRID16:	LD	B,LVLYSIZ
	LD	DE,1010H

S.LOOPY:PUSH	BC
	PUSH	DE
	LD	B,LVLXSIZ

S.LOOPX:PUSH	BC
	PUSH	DE
	CALL	MARK
	POP	DE
	LD	A,D
	ADD	A,16
	LD	D,A
	POP	BC
	DJNZ	S.LOOPX

	POP	DE
	LD	A,E
	ADD	A,16
	LD	E,A
	POP	BC
	DJNZ	S.LOOPY
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = SCREEN COORDENATES OF THE MARK

	CSEG
	PUBLIC	MARK
	EXTRN	LINE

MARK:	LD	A,15
	LD	(FORCLR),A
	LD	A,LOGIMP
	LD	(LOGOP),A

	PUSH	DE
	PUSH	DE
	PUSH	DE
	LD	C,E
	LD	A,D
	ADD	A,16
	LD	B,A
	CALL	LINE			;UPPER LINE

	POP	DE
	LD	A,E
	ADD	A,16
	LD	E,A
	LD	C,A
	LD	A,D
	ADD	A,16
	LD	B,A
	CALL	LINE			;LOWER LINE

	POP	DE
	LD	B,D
	LD	A,E
	ADD	A,16
	LD	C,A
	CALL	LINE			;LEFT LINE

	POP	DE
	LD	A,D
	ADD	A,16
	LD	D,A
	LD	B,A
	LD	A,E
	ADD	A,16
	LD	C,A
	JP	LINE			;RIGHT LINE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = DEFINITION OF GROUP OF LINES
;	C = COLOR

	CSEG
	PUBLIC	GLINES
	EXTRN	LINE

GLINES:	LD	IYL,E
	LD	IYU,D
	LD	A,C
	LD	(FORCLR),A
	LD	A,LOGIMP
	LD	(LOGOP),A

G.NEXT:	LD	A,(IY+0)
	OR	A
	RET	Z
	LD	D,(IY+1)		;LOAD NEXT LINE
	LD	E,(IY+2)
	LD	B,(IY+3)
	LD	C,(IY+4)

G.LINE:	PUSH	AF
	PUSH	IY			;PAINT THE LINE
	PUSH	BC
	PUSH	DE
	CALL	LINE
	POP	DE
	POP	BC
	POP	IY

	LD	A,D			;USE THE INCREMENTS OF THE TABLE
	ADD	A,(IY+5)		;AND GET NEXT LINE
	LD	D,A
	LD	A,E
	ADD	A,(IY+6)
	LD	E,A
	LD	A,B
	ADD	A,(IY+7)
	LD	B,A
	LD	A,C
	ADD	A,(IY+8)
	LD	C,A
	POP	AF
	DEC	A
	JR	NZ,G.LINE

	LD	DE,9			;PASS TO NEXT ELEMENT OF THE TABLE
	ADD	IY,DE
	JR	G.NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = RECEIVERS

	CSEG
	PUBLIC	LISTEN
	EXTRN	MOUSEX,MOUSEY,PSELECT,PTRHL,PTRCALL

LISTEN:	LD	(L.RCV),DE
L.BEGIN:CALL	PSELECT
	CP	KB_ESC			;USER PRESS ESC, RETURN WITH Z=1
	RET	Z

	CP	MS_BUTTON1
	JR	Z,L.SEARCH
	CP	MS_BUTTON2
	JR	Z,L.SEARCH
	EX	AF,AF'
	LD	A,(MOUSEX)		;IF THE EVENT IS NOT A MOUSE CLICK
	LD	H,A			;TAKE THE COORDENATES FROM ACTUAL
	LD	A,(MOUSEY)		;MOUSE PARAMETERS
	LD	L,A
	EX	AF,AF'

L.SEARCH:
	LD	(L.PAR),HL
	LD	(L.EVENT),A
	LD	E,L
	LD	D,H
	LD	HL,(L.RCV)

L.LOOP:	LD	A,(HL)			;0 MARKS END OF RECEIVERS
	OR	A
	JR	Z,L.BEGIN

	LD	(L.PTR),HL		;CHECK IF THE MOUSE POSITION IS INSIDE
	CP	D			;OF ACTUAL ELEMENT OF RECEIVER
	JR	NC,L.END
	INC	HL
	ADD	A,(HL)
	CP	D
	JR	C,L.END
	INC	HL
	LD	A,(HL)
	CP	E
	JR	NC,L.END
	INC	HL
	ADD	A,(HL)
	CP	E
	JR	C,L.END

	INC	HL			;IT IS THE RECEIVER, SO JUMP TO IT
	CALL	PTRHL
	LD	A,(L.EVENT)
	LD	DE,(L.PAR)
	CALL	PTRCALL
	OR	1			;SET Z=0
	RET

L.END:	LD	HL,(L.PTR)
	LD	BC,6
	ADD	HL,BC
	JR	L.LOOP

	DSEG
L.RCV:	DW	0
L.EVENT:DB	0
L.PTR:	DW	0
L.PAR:	DW	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	DSEG
	PUBLIC	EDLEVEL,EDROOM
EDROOM:	DW	0
EDLEVEL:DW	0

