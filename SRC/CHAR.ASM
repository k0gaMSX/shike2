
	INCLUDE	BIOS.INC
	INCLUDE	EVENT.INC
	INCLUDE	LEVEL.INC
	INCLUDE	DATA.INC

CHARHEIGHT	EQU	4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	CHARINIT
	EXTRN	PLACE,ADDAHL,PTRHL,SETCAMOP,CHARSDAT,PUTLPAGE,EXEC

CHARINIT:
	PUSH	IX
	LD	HL,READY		;INITIALIZE THE LINKED LIST
	LD	(READY+CHAR.NEXT),HL
	LD	(READY+CHAR.PREV),HL
	LD	A,DNODIR		;INITIALIZE USER VARIABLES
	LD	(USERDIR),A
	XOR	A
	LD	(KEYDIR),A

	CALL	PUTLPAGE		;GET CHAR INITIALIZATION DATA FROM
	LD	HL,CHARSDAT		;LEVEL INFO
	LD	IX,CHARBUF
	LD	B,NR_CHARS

C.LOOP:	PUSH	BC
	LD	(C.PTR),HL
	PUSH	HL
	POP	IY
	LD	A,(IY+CINFO.CONTROL)	;TRANSFORM CONTROLLER NUMBER TO FUNCTION
	LD	B,A
	ADD	A,A
	ADD	A,A
	ADD	A,B
	LD	HL,CTRL
	CALL	ADDAHL
	CALL	PTRHL
	LD	B,H
	LD	C,L
	LD	E,(IY+CINFO.PAT)	;E = PATTERN NUMBER
	CALL	CHARACTER		;INITIALIZE CHARACTER
	LD	HL,(C.PTR)
	LD	E,L
	LD	D,H
	LD	BC,CINFO.DIR
	ADD	HL,BC
	LD	C,(HL)
	CALL	PLACE			;PLACE IT IN THE MAP
	LD	DE,SIZCHAR		;NEXT CHARACTER
	ADD	IX,DE
	LD	HL,(C.PTR)
	LD	DE,SIZCINFO
	ADD	HL,DE
	POP	BC
	DJNZ	C.LOOP

	POP	IX
	RET


CTRL:	DW	DUMMY,CS.0
	DB	0
	DW	USER,CS.1
	DB	1
	DW	FOLLOW,CS.2
	DB	2
	DW	EXEC,CS.3
	DB	3
	DW	TELLCTL,CS.4
	DB	4

CS.0:	DB	"DUMMY",0
CS.1:	DB	"USER",0
CS.2:	DB	"FOLLOW",0
CS.3:	DB	"EXEC",0
CS.4:	DB	"TELL",0

	DSEG
C.PTR:	DW	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = CHAR CONTROL FUNCTION
;	C = CHAR CONTROL CODE
;OUTPUT: Z = 1 WHEN NO DEFINITION IS FOUND
;	HL = POINTER TO CONTROL INFORMATION

	CSEG
	PUBLIC	CHARCTL
	EXTRN	PTRHL

CHARCTL:LD	IY,CTRL
	EX	DE,HL
	LD	B,NR_CHARCTL

CT.LOOP:LD	A,L
	CP	(IY+CHARCTL.FUN)
	JR	NZ,CT.CODE
	LD	A,H
	CP	(IY+CHARCTL.FUN+1)
	JR	Z,CT.OK

CT.CODE:LD	A,C
	CP	(IY+CHARCTL.CODE)
	JR	Z,CT.OK

	LD	DE,SIZCHARCTL
	ADD	IY,DE
	DJNZ	CT.LOOP
	RET

CT.OK:	PUSH	IY
	POP	HL
	OR	1
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: IX = POINTER TO THE CHARACTER
;       DE = NEW CONTROL FUNCTION

	CSEG
	PUBLIC	CHANGECTL

CHANGECTL:
	LD	(IX+CHAR.CONTROL),E
	LD	(IX+CHAR.CONTROL+1),D
	JP	SETRDY

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHARACTER

	CSEG
	PUBLIC	DUMMY

DUMMY:	LD	E,IDLEF
	JP	UNLINK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHAR
;	DE = HEAD OF LIST WHERE LINK

	CSEG

LINK:   LD	(IX+CHAR.STATE),READYF
	LD	A,(IX+CHAR.NEXT)
	OR	(IX+CHAR.NEXT+1)
	RET	NZ
	LD	IYL,E			;IY = HEAD
	LD	IYU,D
	LD	L,E			;HL = HEAD
	LD	H,D
	LD	E,(IY+CHAR.NEXT)	;DE = HEAD->NEXT
	LD	D,(IY+CHAR.NEXT+1)
	LD	C,IXL
	LD	B,IXU			;BC = PTR

	LD	(IY+CHAR.NEXT),C	;HEAD->NEXT = PTR
	LD	(IY+CHAR.NEXT+1),B
	LD	IYL,E
	LD	IYU,D			;IY = HEAD->NEXT

	LD	(IX+CHAR.PREV),L
	LD	(IX+CHAR.PREV+1),H	;PTR->PREV = HEAD
	LD	(IX+CHAR.NEXT),E
	LD	(IX+CHAR.NEXT+1),D	;PTR->NEXT = HEAD->NEXT

	LD	(IY+CHAR.PREV),C
	LD	(IY+CHAR.PREV+1),B	;HEAD->NEXT->PREV = PTR
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHAR
;       E  = NEW STATE

	CSEG

UNLINK:	LD	(IX+CHAR.STATE),E
	LD	C,(IX+CHAR.PREV)
	LD	B,(IX+CHAR.PREV+1)	;BC = PTR->PREV
	LD	E,(IX+CHAR.NEXT)
	LD	D,(IX+CHAR.NEXT+1)	;DE = PTR->NEXT

	LD	IYL,C			;IY = PTR->PREV
	LD	IYU,B
	LD	(IY+CHAR.NEXT),E
	LD	(IY+CHAR.NEXT+1),D	;PTR->PREV->NEXT = PTR->NEXT

	LD	IYL,E			;IY = PTR->NEXT
	LD	IYU,D
	LD	(IY+CHAR.PREV),C
	LD	(IY+CHAR.PREV+1),B	;PTR->NEXT->PREV = PTR->PREV
	XOR	A
	LD	(IX+CHAR.NEXT),A
	LD	(IX+CHAR.NEXT+1),A
	LD	(IX+CHAR.PREV),A
	LD	(IX+CHAR.PREV+1),A
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	E = PATTERN NUMBER

	CSEG
	PUBLIC	CHARPAT

CHARPAT:LD	A,E			;WE HAVE 4 DIRECTIONS, SO
	CP	4			;EACH PATTERN MEANS MULTIPLY BY 4
	LD	B,0			;WE HAVE 4 PATTERNS IN 0-112
	JR	C,C.1			;AND 4 PATTERNS IN 128-240
	SUB	4
	LD	B,64

C.1:	ADD	A,A
	ADD	A,A
	ADD	A,B
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHAR
;	E = PATTERN
;	BC = CONTROLLER FUNCTION

	CSEG
	EXTRN	MOVABLE

CHARACTER:
	LD	(IX+CHAR.PAT),E
	PUSH	BC
	CALL	CHARPAT
	OR	80H			;MARK AS ANIMATE OBJECT
	LD	E,A
	LD	C,CHARHEIGHT
	LD	HL,SETRDY
	CALL	MOVABLE
	XOR	A
	LD	(IX+CHAR.ARG1),A
	LD	(IX+CHAR.ARG2),A
	LD	(IX+CHAR.SCRIPT),A
	LD	(IX+CHAR.PC),A
	LD	(IX+CHAR.SP),A
	POP	HL
	LD	(IX+CHAR.CONTROL),L
	LD	(IX+CHAR.CONTROL+1),H
	LD	DE,READY		;LINK IT IN READY LIST
	JP	LINK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	THINK
	EXTRN	PTRCALL

THINK:	XOR	A			;FLAG FOR READING KEYBOARD
	LD	(KBD),A
	PUSH	IX
	LD	DE,(READY+CHAR.NEXT)
	JR	T.ELOOP

T.LOOP:	LD	IXL,E
	LD	IXU,D
	LD	E,(IX+CHAR.NEXT)
	LD	D,(IX+CHAR.NEXT+1)
	PUSH	DE
	LD	L,(IX+CHAR.CONTROL)
	LD	H,(IX+CHAR.CONTROL+1)
	CALL	PTRCALL
	POP	DE

T.ELOOP:LD	HL,READY
	CALL	DCOMPR
	JR	NZ,T.LOOP

T.END:	POP	IX
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHARACTER

	CSEG

SETRDY:	LD	DE,READY
	JP	LINK


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	A = KEY
;OUTPUT: A = DIRECTION
;	 CY = 1 WHEN E IS NOT A DIRECTIONAL KEY

	CSEG

KEY2DIR:SUB	KB_RIGTH
	JR	C,K.NODIR
	CP	DNODIR
	JR	NC,K.NODIR
	OR	A
	RET

K.NODIR:LD	A,DNODIR
	SCF
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	E = CHAR NUMBER
;OUTPUT:HL = POINTER TO THE N CHAR

	CSEG
	PUBLIC	GETNCHAR
	EXTRN	MULTEA

GETNCHAR:
	LD	A,SIZCHAR
	CALL	MULTEA
	LD	DE,CHARBUF
	ADD	HL,DE
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHARACTER

	CSEG
	PUBLIC	FOLLOW
	EXTRN	PATH2MOV

FOLLOW:	LD	A,(IX+CHAR.ARG2)	;DOES IT HAVE ANY STEP AVAILABLE?
	CP	(IX+CHAR.PATHCNT)
	JR	Z,F.1

	INC	(IX+CHAR.ARG2)
	LD	HL,CHAR.PATH
	CALL	ADDAHL
	LD	E,IXL			;TAKE ADDRESS OF IX->PATH
	LD	D,IXU
	ADD	HL,DE
	LD	A,(HL)			;A = IX->PATH[IX->ARG2++]
	CALL	STEP
	LD	E,ANIMF
	JP	NZ,UNLINK
	LD	(IX+CHAR.PATHCNT),0
	LD	(IX+CHAR.ARG2),0
	RET

F.1:	LD	E,(IX+CHAR.ARG1)
	CALL	GETNCHAR		;TAKE ADDRESS OF CHARACTER[ARG1]
	PUSH	HL
	POP	IY
	LD	(IX+CHAR.ARG2),0
	CALL	PATH2MOV
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: IX = POINTER TO THE CHARACTER

	CSEG
	PUBLIC	TELLCTL
	EXTRN	TALKS,TELL,ARYHL

TELLCTL:
	LD	A,(IX+CHAR.ARG1)
	LD	HL,TALKS
	CALL	ARYHL
	EX	DE,HL		;DE = TALKS[IX->ARGS1]
	LD	BC,WAKEUP
	CALL	TELL
	RET	Z		;THERE WAS SOME ERROR TELLING SOMETHING
				;TRY AGAIN
	LD	E,TELLF
	JP	UNLINK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: IX = POINTER TO THE CHARACTER

	CSEG

WAKEUP:	LD	DE,EXEC		;RESUME THE EXECUTION OF THE SCRIPT
	JP	CHANGECTL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: IX = POINTER TO THE CHARACTER

	CSEG
	PUBLIC	USER
	EXTRN	EDITOR,RESETCAM,FINISH,KBHIT,STEP,MAPACTION

USER:	XOR	A			;AVOID 2 CHARS READING THE KEYBOARD
	LD	HL,KBD
	OR	(HL)
	RET	NZ
	INC	(HL)
	CALL	KBHIT
	CP	KB_ESC
	JR	NZ,U.EDIT
	LD	A,1
	LD	(FINISH),A
	RET

U.EDIT:	CP	KB_SELECT
	JR	NZ,U.TELL
	CALL	EDITOR
	JP	RESETCAM

U.TELL:	CP	KB_SPACE
	JR	NZ,U.RELSE
	CALL	MAPACTION
	RET

U.RELSE:BIT	7,A
	JR	Z,U.DIR
	AND	7FH			;REMOVE RELESE MARK
	LD	HL,KEYDIR
	CP	(HL)
	JR	NZ,U.STEP		;RELEASE OF ANOTHER KEY?
	LD	(HL),0
	LD	A,DNODIR
	LD	(USERDIR),A
	RET

U.DIR:	OR	A
	JR	Z,U.STEP		;NO KEY, TEST PREVIOUS KEY
	LD	(KEYDIR),A
	CALL	KEY2DIR			;CHECK IF THE NEW KEY IS DIRECTIONAL
	JR	C,U.STEP
	LD	(USERDIR),A

U.STEP:	LD	A,(USERDIR)		;IF KEYDIR IS NODIR THEN RETURN
	CP	DNODIR
	RET	Z
	CALL	STEP
	LD	E,ANIMF
	JP	NZ,UNLINK
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	DSEG
KBD:	DB	0
USERDIR:DB	0			;LAST DIRECTION PRESSED BY USER
KEYDIR:	DB	0			;LAST DIRECTIONAL KEY PRESSED BY USER
READY:	DS	CHAR.PREV+2		;CHARACTERS READY TO RUN
CHARBUF:DS	SIZCHAR*NR_CHARS

