
	INCLUDE	BIOS.INC
	INCLUDE	SHIKE2.INC


NR_PATTIL	EQU	5		;NUMBER OF PATTERNS BY TILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;THE TILES VALUES ARE CODED LIKE A SPARSE MATRIX, WHERE FOR EACH PATTERN
;POSITION (X,Y COORDENATES) WE HAVE A STACK OF PATTERNS & MASK AND THE VALUE
;OF THE Z COORDENATE OF THE TILE. CODED IN C:
;
;struct pattern {
;	unsigned y : 4;
;	unsigned tile : 1;
;	unsigned height : 3;
;	unsigned char pattern;
;};
;
;struct pattern_stack {
;	struct pattern stack[NR_PATTIL];
;};
;
;struct pattern_stack buffer[NR_SCRCOL][NR_SCRROW];
;


ZVALSIZ		EQU	2
ZSTACKSIZ	EQU	NR_PATTIL*ZVALSIZ
ZROWSIZ		EQU	NR_SCRCOL*ZSTACKSIZ
ZBUFFERSIZ	EQU	NR_SCRROW*ZROWSIZ

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	ZVALINIT
	EXTRN	BZERO

ZVALINIT:
	LD	HL,ZBUFFER
	LD	BC,ZBUFFERSIZ
	JP	BZERO

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = INPUT PATTERN
;OUTPUT:HL = POINTER TO THE TILE STACK ASSOCIATED TO THE INPUT PATTERN


	CSEG
	EXTRN	MULTDEA

ZSTACK:	PUSH	DE
	LD	A,E
	LD	DE,ZROWSIZ
	CALL	MULTDEA			;HL = YOFFSET
	POP	DE
	PUSH	HL
	LD	A,D
	LD	DE,ZSTACKSIZ
	CALL	MULTDEA			;HL = XOFFSET
	POP	DE			;DE = YOFFSET
	ADD	HL,DE			;HL = YOFFSET + XOFFSET
	LD	DE,ZBUFFER
	ADD	HL,DE			;HL = TILE STACK ADDRESS
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: DE = ACTUAL PATTERN
;	C  = Z VALUE
;	B  = PATTERN NUMBER
;	A = HEIGHT LEVEL (E BIT INDICATE TILE)
;OUTPUT:ZF = 1 WHEN ERROR

	CSEG
	PUBLIC	ADDZPAT

ADDZPAT:RLCA
	RLCA
	RLCA
	RLCA
	LD	(A.HGHT),A
	LD	(A.ZVAL),BC
	CALL	ZSTACK

	LD	C,0
A.LOOP:	EX	DE,HL			;DE = STACK ADDRESS
	CALL	ZVALUE
	LD	A,D			;PATTERN 0 MEANS NO USED
	OR	A
	JR	NZ,A.LOOP

	DEC	HL
	DEC	HL
	LD	BC,(A.ZVAL)		;HL = ZVAL POSITION
	LD	A,(A.HGHT)
	OR	C
	LD	(HL),A
	INC	HL
	LD	(HL),B			;B = PATTERN NUMBER
	OR	1			;Z = 0 MEANS OK
	RET

	DSEG
A.ZVAL:	DW	0			;Z VALUE
A.HGHT:	DB	0			;HEIGHT LEVEL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: DE = TILE STACK
;	C = ZVALUE POSITION IN THE TILE STACK
;OUTPUT:ZF = 1 WHEN ERROR
;	D = PATTERN
;	E = Y
;	HL = POINT TO NEXT ELEMENT IN TILE STACK
;	B = INPUT VALUE
;	C = INPUT VALUE + 1

	CSEG
	PUBLIC ZVALUE
	EXTRN	MEMMOVE

ZVALUE:	LD	A,C
	CP	NR_PATTIL
	JR	C,Z.1

	PUSH	BC		;WE DON'T HAVE SPACE FOR OTHER
	PUSH	DE		;PATTERN IN THE STACK. IT IS VERY
	EX	DE,HL		;UNLIKELY THAT WE WILL NEED ALL THE
	LD	DE,ZSTACKSIZ	;PATTERNS, SO WE CAN DISCARD THE FIRST
	AND	A		;AND MOVE EVERYTHING IN THE STACK
	SBC	HL,DE	
	LD	E,L
	LD	D,H
	INC	HL
	INC	HL
	LD	BC,ZSTACKSIZ-ZVALSIZ
	CALL	MEMMOVE
	POP	DE
	XOR	A
	DEC	DE
	LD	(DE),A
	DEC	DE
	LD	(DE),A
	POP	BC
	DEC	C

Z.1:	EX	DE,HL
	LD	E,(HL)			;E = Y VALUE
	INC	HL
	LD	D,(HL)			;D = PATTERN
	INC	HL
	INC	C			;SET Z FLAG = 0
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = SCREEN COORDENATES
;	HL = BASE COORDENATE
;	B = X SIZE
;	C = Y SIZE
;	A = Z VALUE

	CSEG
	PUBLIC	REMAP
	EXTRN	PAT2XY,XY2PAT,VDPPAGE

REMAP:	SRL	A
	SRL	A
	LD	(R.HGHT),A
	LD	A,LOGTIMP		;SET THE DATA FOR THE VDP COMMANDS
	LD	(LOGOP),A
	LD	A,PATPAGE
	LD	(VDPPAGE),A

	PUSH	DE
	LD	(R.BASE),HL
	LD	E,C			;DE = REGION SIZE
	LD	D,B
	CALL	XY2PAT
	LD	C,L			;BC = REGION SIZE IN PATTERN UNITS
	LD	B,H
	CALL	ADJUSTBC		;ADJUST BC DUE TO REGION SIZE

	POP	DE
	CALL	ADJUSTBC		;ADJUST BC DUE TO ORIGIN POINT
	CALL	XY2PAT
	EX	DE,HL			;DE = PATTERN POSITION
	CALL	PAT2XY			;HL = PATTERN COORDENATES

R.LOOPX:PUSH	BC			;LOOP OVER X
	PUSH	HL
	PUSH	DE
	LD	B,C
R.LOOPY:PUSH	BC			;LOOP OVER Y
	PUSH	HL
	PUSH	DE
	CALL	STACK
	POP	DE
	INC	E
	POP	HL
	LD	A,L
	ADD	A,8
	LD	L,A
	POP	BC
	DJNZ	R.LOOPY			;END OF LOOPY

	POP	DE
	INC	D
	POP	HL
	LD	A,H
	ADD	A,16
	LD	H,A
	POP	BC
	DJNZ	R.LOOPX			;END OF LOOPX
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = PATTERN POSITION
;	HL = PATTERN BASE COORDENATES
;	(R.BASE) = BASE POSITION

	CSEG
	EXTRN	PNUM2XY,PAT2XY,LMMM

STACK:	LD	A,E
	CP	NR_SCRROW-1		;IS IT VISIBLE?
	RET	P
	LD	A,D
	CP	NR_SCRCOL-1
	RET	P

	XOR	A
	LD	(R.DIRTY),A
	LD	(R.COOR),HL		;SAVE PATTERN BASE COORDENATES
	CALL	ZSTACK			;HL = STACK ADDRESS
	LD	C,0
	EXX
S.LOOPX:EXX
S.LOOP:	EX	DE,HL			;DE = STACK ADDRESS
	CALL	ZVALUE			;HL = NEXT ELEMENT IN STACK ADDRESS
	RET	Z			;D = PATTERN
	LD	A,D			;E = Z VALUE
	OR	A
	RET	Z

	LD	A,(R.DIRTY)		;IF STACK IS DIRTY
	OR	A			;THEN COPY ALL THE PATTERNS
	LD	A,E
	EXX
	JR	NZ,R.COPY
	LD	E,A			;IF HEIGHT OF THE PATTERN IS BIGGER
	AND	0F0H			;THEN COPY IT WHEN IT IS A FLOOR
	RRCA				;IF HEIGHT OF THE PATTERN IS EQUAL
	RRCA				;THEN CHECK THE POSITION
	RRCA				;IF HEIGHT OF THE PATTERN IS SMALLER
	RRCA				;THEN PASS TO NEXT ELEMENT OF STACK
	LD	D,A
	AND	7
	LD	HL,R.HGHT
	CP	(HL)
	JR	Z,S.1
	JR	C,S.LOOPX
	LD	A,D
	BIT	3,D
	JR	Z,R.COPY

S.1:	LD	A,E
	AND	0FH
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	E,A			;DE = ZVAL*8
	LD	D,0
	LD	HL,(R.COOR)
	LD	H,0			;HL = PATTERN BASE Y COORDENATE
	ADD	HL,DE
	EX	DE,HL			;DE = PATTERN ZBASE Y COORDENATE
	LD	HL,(R.BASE)		;HL = MOB BASE Y COORDENATE
	OR	A
	SBC	HL,DE
	JR	NC,S.LOOPX		;PY < MY => DON'T REPAINT

R.COPY:	EXX
	LD	A,1
	LD	(R.DIRTY),A
	PUSH	BC
	PUSH	HL
	LD	E,D
	CALL	PNUM2XY			;HL = ORIGIN COORDENATES
	LD	DE,(R.COOR)		;DE = PATTERN BASE COORDENATES
	LD	BC,1008H
	CALL	LMMM
	POP	HL
	POP	BC
	JR	S.LOOP

	DSEG
R.BASE:	DW	0
R.COOR:	DW	0
R.DIRTY:DB	0
R.HGHT:	DB	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = INPUT VALUE
;	BC = COUNT
;OUTPUT:DE = INPUT VALUE (IT IS NOT MODIFIED)
;	BC = COUNT AFTER CHECKING

	CSEG

ADJUSTBC:
	LD	A,D
	AND	0FH			;IF DE IS NOT DIVISIBLE BY 16 AND 8
	JR	Z,A.1			;EACH ONE, THEN IT IS
	INC	B			;NEEDED INCREMENT THE SIZE OF THE
A.1:	LD	A,E			;REMAP REGION
	AND	07H
	RET	Z
	INC	C
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	DSEG
ZBUFFER:	DS	ZBUFFERSIZ


