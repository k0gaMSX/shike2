	INCLUDE	SHIKE2.INC
	INCLUDE	BIOS.INC


TILE_SPRITE	EQU	0
TILE_PATTERN	EQU	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	MAIN
	EXTRN	BZERO,SETISR,SPRITE,COLORSPRITE,CHKMSX,INITVDP

MAIN:
	LD	HL,DATASEG
	LD	BC,DATASIZ
	CALL	BZERO	;CLEAR THE DATA SEGMENT

	CALL	CHKMSX
	RET	Z		;THIS MSX HAS SOME PROBLEM FOR US

	CALL	INITVDP
	CALL	SETISR		;SET GAME ISR
	LD	C,TILE_PATTERN
	LD	DE,TILEMARK
	CALL	SPRITE		;TEMPORAL CALL

	LD	C,TILE_SPRITE
	LD	DE,TILECOL
	CALL	COLORSPRITE	;TEMPORAL CALL
	XOR	A
	LD	E,A
	LD	D,A
	LD	C,TILE_SPRITE
	LD	B,TILE_PATTERN
	CALL	PUTSPRITE

LOOP:
	CALL	TILEMOV
	EI
	HALT
	JR	LOOP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	EXTRN	RESISR,MSXTERM

EXIT:
	CALL	RESISR		;RESTORE SYSTEM ISR
	EI
	XOR	A
	CALL	CHGMOD
	JP	MSXTERM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	EXTRN	GETCHAR,PUTSPRITE

TILEMOV:
	LD	DE,0

.MOVLOOP:
	PUSH	DE
	CALL	GETCHAR
	POP	DE
	JR	Z,.DONE
.ESC:
	CP	KB_ESC
	CALL	Z,EXIT
.UP:
	CP	KB_UP
	JR	NZ,.DOWN
	LD	E,-8
	JR	.MOVLOOP
.DOWN:
	CP	KB_DOWN
	JR	NZ,.LEFT
	LD	E,8
	JR	.MOVLOOP
.LEFT:
	CP	KB_LEFT
	JR	NZ,.RIGTH
	LD	D,-16
	JR	.MOVLOOP
.RIGTH:
	CP	KB_RIGTH
	JR	NZ,.MOVLOOP
	LD	D,16
	JR	.MOVLOOP

.DONE:
	LD	A,(TILE_Y)
	ADD	A,E
	LD	(TILE_Y),A
	LD	E,A

	LD	A,(TILE_X)
	ADD	A,D
	LD	(TILE_X),A
	LD	D,A
	LD	C,TILE_SPRITE
	LD	B,TILE_PATTERN
	JP	PUTSPRITE


TILEMARK:
	DB	003H,00CH,030H,0C0H,0C0H,030H,00CH,003H
	DB	000H,000H,000H,000H,000H,000H,000H,000H
	DB	0C0H,030H,00CH,003H,003H,00CH,030H,0C0H
	DB	000H,000H,000H,000H,000H,000H,000H,000H

TILECOL:
	DB	0CH,0CH,0CH,0CH,0CH,0CH,0CH,0CH
	DB	0CH,0CH,0CH,0CH,0CH,0CH,0CH,0CH


	DSEG
TILE_X:		DB	0
TILE_Y:		DB	0


