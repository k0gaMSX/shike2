	INCLUDE	KBD.INC
	INCLUDE GEOMETRY.INC

NR_CHARS	EQU	8		;NUMBER OF CHARACTERS IN THE FULL GAME

MAXX		EQU	16
MAXY		EQU	16

;CHARACTER COORDENATES HAVE THE FORM (MAP,SCR,X,Y)

CHAR.MAP	EQU	0		;MAP POSITION. -1 MEANS IT IS FREE
CHAR.SCR	EQU	1		;SCREEN POSITION
CHAR.Y		EQU	2		;Y COORDENATE
CHAR.X		EQU	3		;X COORDENATE
CHAR.YR		EQU	4		;Y RENDER COORDENATE
CHAR.XR		EQU	6		;X RENDER COORDENATE
CHAR.DIR	EQU	8		;DIRECTION OF THE CHARACTER
CHAR.DIRSTEP	EQU	9		;DIRECTION OF NEXT STEP
CHAR.DIRCNT	EQU	10		;COUNTER USED FOR ANIMATIONS
CHAR.CONTROL	EQU	11		;CONTROLLER FOR THE CHARACTER
CHAR.MOB	EQU	13		;ACTUAL MOB USED
CHAR.SIZ	EQU	14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	HL = FUNCTION POINTER

	CSEG
	EXTRN	PTRCALL

FOREACH:LD	IX,BUFFER
	LD	B,NR_CHARS

F.LOOP:	PUSH	BC
	PUSH	HL
	CALL	PTRCALL
	POP	HL
	POP	BC

	LD	DE,CHAR.SIZ
	ADD	IX,DE
	DJNZ	F.LOOP
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	INITCHAR
	EXTRN	BZERO

INITCHAR:
	LD	HL,BUFFER
	LD	BC,CHAR.SIZ*NR_CHARS
	CALL	BZERO
	XOR	A
	LD	(N.MOB),A

	LD	HL,I.INIT
	CALL	FOREACH
	LD	HL,KEYBOARD
	JP	NEWCHAR

I.INIT:	LD	(IX+CHAR.DIRSTEP),D.NODIR
	LD	(IX+CHAR.MAP),-1
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	DE = CONTROLLER FUNCTION

	CSEG
	PUBLIC	NEWCHAR

NEWCHAR:LD	IX,BUFFER
	LD	B,NR_CHARS
	LD	A,-1
	EX	DE,HL

N.LOOP:	CP	(IX+CHAR.MAP)
	JR	Z,N.FOUND
	LD	DE,CHAR.SIZ
	ADD	IX,DE
	DJNZ	N.LOOP
	LD	HL,0
	RET				;TODO: HANDLE OVERRUN

N.FOUND:LD	(IX+CHAR.MAP),0		;REMOVE FROM FREE LIST
	LD	(IX+CHAR.CONTROL),E
	LD	(IX+CHAR.CONTROL+1),D
	LD	A,(N.MOB)
	LD	(IX+CHAR.MOB),A		;ASSIGN MOB
	INC	A
	LD	(N.MOB),A
	LD	L,IXL
	LD	H,IXU
	RET

	DSEG
N.MOB:	DB	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	CHARACTERS
	EXTRN	PTRCALL

CHARACTERS:
	LD	HL,C.ACTION
	JP	FOREACH

;

C.ACTION:
	LD	A,-1				;SKIP FREE CHARACTERS
	CP	(IX+CHAR.MAP)
	RET	Z

	LD	A,(IX+CHAR.DIRCNT)		;IS IT DOING A STEP?
	OR	A
	JR	Z,C.CONTROL
	CALL	STEP
	RET

C.CONTROL:
	LD	L,(IX+CHAR.CONTROL)		;JUMP TO THE CONTROLLER
	LD	H,(IX+CHAR.CONTROL+1)
	CALL	PTRCALL

	LD	A,(IX+CHAR.DIRSTEP)		;IS THERE A NEW DIRECTION?
	CP	D.NODIR
	RET	Z
	LD	D,(IX+CHAR.X)
	LD	E,(IX+CHAR.Y)

	LD	A,(IX+CHAR.DIRSTEP)		;TRY MOVE THE CHARACTER
	CALL	MOVEUC
	LD	A,-1				;AND CHECK THE LIMITS
	CP	D
	RET	Z
	CP	E
	RET	Z
	LD	A,MAXX
	CP	D
	RET	Z
	LD	A,MAXY
	CP	E
	RET	Z

	LD	A,4				;IT IS A GOOD MOVEMENT
	LD	(IX+CHAR.DIRCNT),A
	LD	L,(IX+CHAR.Y)
	LD	H,(IX+CHAR.X)
	LD	(IX+CHAR.X),D
	LD	(IX+CHAR.Y),E

	EX	DE,HL
	LD	BC,7814H			;TODO: PUT P1 IN A CONSTANT
	CALL	WRLD2SCR			;TRANSFORM COORDENATES
	LD	(IX+CHAR.XR),L
	LD	(IX+CHAR.XR+1),H
	LD	(IX+CHAR.YR),E
	LD	(IX+CHAR.YR+1),D		;AND NOW MOVE YOURSELF!!!!
	;CONTINUE IN STEP

	DSEG
C.COORD:	DW	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHARACTER

	CSEG
	EXTRN	MOV16ISO,PUTMOB

STEP:	LD	A,(IX+CHAR.DIRSTEP)
	LD	(IX+CHAR.DIR),A
	LD	L,(IX+CHAR.XR)
	LD	H,(IX+CHAR.XR+1)
	LD	E,(IX+CHAR.YR)
	LD	D,(IX+CHAR.YR+1)
	CALL	MOV16ISO		;CALCULATE NEXT RENDER COORDENATES
	LD	(IX+CHAR.XR),L
	LD	(IX+CHAR.XR+1),H
	LD	(IX+CHAR.YR),E
	LD	(IX+CHAR.YR+1),D
	LD	C,(IX+CHAR.MOB)
	LD	B,0
	PUSH	IX
	CALL	PUTMOB			;RENDER THE CHARACTER
	POP	IX
	DEC	(IX+CHAR.DIRCNT)
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO THE CHARACTER

	CSEG
	EXTRN	GETCH,KEY2DIR,MOVEUC,WRLD2SCR,EXIT

KEYBOARD:
	CALL	GETCH
	RET	Z				;NO NEW KEY

	BIT	7,A
	JR	NZ,K.RELEASE			;IT IS A RELEASE KEY

	PUSH	AF				;SAVE THE KEY
	CALL	KEY2DIR
	JR	C,K.SYSTEM

	LD	(IX+CHAR.DIRSTEP),A
	POP	AF
	LD	(K.KEY),A
	RET

K.SYSTEM:					;IT IS NOT A DIRECTIONAL KEY
	POP	AF				;TODO: MOVE TO OTER PLACE
	CP	KB_ESC
	CALL	Z,EXIT
	RET

K.RELEASE:
	AND	7FH
	LD	HL,K.KEY
	CP	(HL)
	RET	NZ
	LD	(IX+CHAR.DIRSTEP),D.NODIR
	RET

	DSEG
K.KEY:		DB	0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	DSEG
BUFFER:	DS	CHAR.SIZ * NR_CHARS
