	INCLUDE SHIKE2.INC
	INCLUDE	BIOS.INC
	INCLUDE VDP.INC


NR_MOBS		EQU	6		;MAXIMUM NUMBER OF MOBS IN THE SCREEN
OFFSET		EQU	128		;OFFSET INTO MOB PAGE WHERE ARE
					;LOCATED THE MOB PATTERNS

;A MOB (MOVABLE OBJECT BLOCK) IS EQUIVALENT TO SOFTWARE SPRITES

MOB.YD		EQU	0	;Y COORDENATE IN DISPLAY PAGE (DPPAGE)
MOB.XD		EQU	1	;X COORDENATE IN DISPLAY PAGE (DPPAGE)
MOB.YDSIZ	EQU	2	;Y SIZE IN DISPLAY PAGE (DPPAGE)
MOB.XDSIZ	EQU	3	;X SIZE IN DISPLAY PAGE (DPPAGE)

MOB.YE		EQU	4	;Y COORDENATE FOR ERASING
MOB.XE		EQU	5	;X COORDENATE FOR ERASING
MOB.YESIZ	EQU	6	;Y SIZE FOR ERASING
MOB.XESIZ	EQU	7	;X SIZE FOR ERASING

MOB.Y		EQU	8	;Y COORDENATE IN LAST CALL TO MOB
MOB.X		EQU	9	;X COORDENATE IN LAST CALL TO MOB
MOB.YSIZ	EQU	10	;Y SIZE IN LAST CALL TO PUTMOB
MOB.XSIZ	EQU	11	;X SIZE IN LAST CALL TO PUTMOB

MOB.YO		EQU	12	;Y COORDENATE OF THE GRAPHIC ORIGIN
MOB.XO		EQU	13	;X COORDENATE OF THE GRAPHIC ORIGIN
MOB.SIZ		EQU	14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CSEG

FOREACH:LD	IX,BUFFER
	LD	B,NR_MOBS

F.LOOP:	PUSH	BC
	PUSH	HL
	CALL	F.CALL
	POP	HL
	POP	BC

	LD	DE,MOB.SIZ
	ADD	IX,DE
	DJNZ	F.LOOP
	RET

F.CALL:	JP	(HL)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;HL = X DESTINE
;DE = Y DESTINE
;B = PATTERN
;C = MOB NUMBER

	CSEG
	PUBLIC	PUTMOB

PUTMOB:	LD	A,C
	LD	(M.MOB),A
	LD	(CLIP.X),HL
	LD	(CLIP.Y),DE
	LD	A,16
	LD	(CLIP.XSIZ),A
	LD	A,32
	LD	(CLIP.YSIZ),A

	LD	A,B
	AND	0F0H
	RLCA
	ADD	A,OFFSET
	LD	(CLIP.YO),A
	LD	A,B
	AND	0FH
	RLCA
	RLCA
	RLCA
	RLCA
	LD	(CLIP.XO),A
	CALL	CLIP
	JR	Z,M.NVIS

	LD	A,(CLIP.X)
	LD	D,A
	LD	A,(CLIP.Y)
	LD	E,A
	LD	A,(CLIP.XO)
	LD	H,A
	LD	A,(CLIP.YO)
	LD	L,A
	LD	A,(CLIP.XSIZ)
	LD	B,A
	LD	A,(CLIP.YSIZ)
	LD	C,A
	LD	A,(M.MOB)
	CALL	MOB
	LD	A,1
	OR	A
	RET

M.NVIS:	LD	E,255
	LD	A,(M.MOB)
	CALL	MOB
	XOR	A
	RET

	DSEG

M.MOB:	DB	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT/OUTPUT:	CLIP.X = X BEFORE/AFTER CLIPPING
;		CLIP.Y = Y BEFORE/AFTER CLIPPING
;		CLIP.XSIZ = X SIZE BEFORE/AFTER CLIPPING
;		CLIP.XO = ORIGIN X BEFORE/AFTER CLIPPING
;		CLIP.YSIZ = Y SIZE BEFORE/AFTER CLIPPING
;		CLIP.YO = ORIGIN Y BEFORE/AFTER CLIPPING

	CSEG

CLIP:	LD	DE,(CLIP.X)
	LD	BC,(CLIP.XSIZ)
	CALL	CLIP1
	RET	Z
	LD	(CLIP.X),DE
	LD	(CLIP.XSIZ),BC

	LD	DE,(CLIP.Y)
	LD	BC,(CLIP.YSIZ)
	CALL	CLIP1
	LD	(CLIP.Y),DE
	LD	(CLIP.YSIZ),BC
	RET

	DSEG
CLIP.X:		DW	0
CLIP.Y:		DW	0
CLIP.XSIZ:	DB	0
CLIP.XO:	DB	0
CLIP.YSIZ:	DB	0
CLIP.YO:	DB	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: C = SIZE     (16 <= C <= 64)
;	B = ORIGIN
;	DE = DESTINE (-255 <= DE <= 512)

	CSEG

CLIP1:	LD	A,D
	OR	A
	JR	NZ,C.NOVIS

	LD	L,C
	LD	H,0
	ADD	HL,DE		;HL = DESTINE + SIZE
	JR	C,C.LEFT	;E WAS < 0 AND THE RESULT IS >= 0

	BIT	7,H
	JR	NZ,C.NOVIS	;RESULT IS A NEGATIVE NUMBER

	BIT	4,H
	JR	NZ,C.RIGTH	;E WAS >= 0 AND THE RESULT IS > 255
	JR	C.VIS		;E WAS >= 0 AND THE RESULT IS <= 255

C.LEFT:	LD	E,0		;DESTINE=0
	LD	A,C
	SUB	L		;A = SIZE - VISIBLE PART
	ADD	A,B		;A = ORIGIN + NON VISIBLE PART
	LD	B,A
	LD	C,L		;C = VISIBLE PART
	JR	C.VIS

C.RIGTH:LD	A,C
	SUB	L
	LD	C,A		;C = SIZE - NON VISIBLE PART
	JR	C.VIS

C.VIS:	LD	A,1
	OR	A
	RET

C.NOVIS:XOR	A
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	D = X
;	E = Y
;	H = XO
;	L = YO
;	B = X SIZE
;	C = Y SIZE
;	A = MOB NUMBER

	CSEG
	EXTRN	VDPEND

MOB:	PUSH	HL			;INCREMENT MOB COUNT
	PUSH	DE
	LD	L,A
	LD	H,0			;CALCULATE MOB ADDRESS
	ADD	HL,HL			;HL = A*2
	PUSH	HL
	ADD	HL,HL			;HL = A*4
	PUSH	HL
	ADD	HL,HL			;HL = A*8
	POP	DE
	ADD	HL,DE			;HL = A*8 + A*4
	POP	DE
	ADD	HL,DE			;HL = A*8 + A*4 +A*2
	EX	DE,HL
	LD	IX,BUFFER
	ADD	IX,DE
	POP	DE
	POP	HL

	LD	(IX+MOB.Y),E		;STORE Y COORDENATE
	LD	(IX+MOB.X),D		;STORE X COORDENATE
	LD	(IX+MOB.YO),L		;STORE YO
	LD	(IX+MOB.XO),H		;STORE XO
	LD	(IX+MOB.YSIZ),C		;STORE Y SIZE
	LD	(IX+MOB.XSIZ),B		;STORE X SIZE
	JP	VDPEND			;IT IS POSSIBLE RUN SOME VDP COMMAND?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG
	PUBLIC	INITMOB
	EXTRN	MEMSET

INITMOB:LD	HL,BUFFER
	LD	BC,MOB.SIZ * NR_MOBS
	LD	A,255
	CALL	MEMSET
	LD	IY,INDEXBUF
	LD	HL,I.INDEX		;INITIALISE THE INDEX ARRAY
	JP	FOREACH

I.INDEX:LD	A,IXL
	LD	(IY),A
	INC	IY
	LD	A,IXU
	LD	(IY),A
	INC	IY
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = MOB POINTER
;	(ACPAGE) = ACTION PAGE

	CSEG
	EXTRN	LMMM,VDPPAGE

DRAW:	LD	E,(IX+MOB.Y)		;GET ALL THE PARAMETERS FROM
	LD	D,(IX+MOB.X)		;THE MOB STRUCTURE
	LD	L,(IX+MOB.YO)
	LD	H,(IX+MOB.XO)
	LD	C,(IX+MOB.YSIZ)
	LD	B,(IX+MOB.XSIZ)
	LD	A,MOBPAGE
	LD	(VDPPAGE),A
	LD	A,LOGTIMP
	LD	(LOGOP),A
	JP	LMMM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = MOB POINTER

	CSEG
	EXTRN	HMMM

ERASE:	LD	A,(IX+MOB.YE)
	CP	255
	RET	Z

	LD	E,A
	LD	D,(IX+MOB.XE)
	LD	H,D
	LD	L,E
	LD	B,(IX+MOB.XESIZ)
	LD	C,(IX+MOB.YESIZ)
	LD	A,BAKPAGE
	LD	(VDPPAGE),A
	JP	HMMM		;RESTORE BACKGROUND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT:	IX = POINTER TO MOB

	CSEG

SHOW:	PUSH	IX
	POP	DE

	PUSH	DE
	LD	HL,4
	ADD	HL,DE
	EX	DE,HL
	LD	BC,4
	LDIR			;DISPLAY COORDENATES TO ERASE COORDENATES

	EX	DE,HL
	POP	DE
	LD	BC,4
	LDIR			;PUTMOB COORDENATES TO DISPLAY COORDENATES
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CSEG

DRAWMOBS:
	LD	HL,INDEXBUF
	LD	(D.ACTUAL),HL
	LD	(D.SMALL),HL
	LD	B,NR_MOBS

D.LOOPE:PUSH	BC
        LD	A,255
	LD	HL,(D.ACTUAL)

D.LOOPI:LD	E,(HL)			;SELECT THE MOB WHOSE Y IS THE SMALLEST
	LD	IYL,E
	INC	HL
	LD	E,(HL)
	LD	IYU,E
	INC	HL

	CP	(IY+MOB.Y)
	JR	Z,D.LE
	JR	C,D.NEXT
D.LE:	LD	(D.SMALL),HL		;STORE IN D.SMALL THE POSITION IN THE
	LD	A,(IY+MOB.Y)		;INDEX + 2
D.NEXT:	DJNZ	D.LOOPI

	LD	HL,(D.SMALL)
	DEC	HL
	DEC	HL			;HL = SMALL INDEX POSITION
	LD	DE,(D.ACTUAL)		;DE = ACTUAL INDEX POSIITON

	LD	C,(HL)			;SWAP THE CONTENTS OF (SMALL)
	LD	A,(DE)			;AND THE CONTENTS OF (ACTUAL)
	EX	DE,HL
	LD	(HL),C
	LD	(DE),A
	INC	HL
	INC	DE

	EX	DE,HL
	LD	B,(HL)
	LD	A,(DE)
	EX	DE,HL
	LD	(HL),B
	LD	(DE),A
	INC	HL
	LD	(D.ACTUAL),HL		;POINT ACTUAL FOR THE NEXT ITERATION

	LD	IXL,C
	LD	IXU,B
	LD	A,(IX+MOB.Y)		;IF THE SMALLEST Y IS EQUAL TO 255
	CP	255			;IT MEANS WE DON'T HAVE TO DO
	JR	Z,D.RET			;ANYTHING ELSE

	CALL	DRAW
	POP	BC
	DJNZ	D.LOOPE
	RET

D.RET:	POP	BC
	RET


	DSEG
D.SMALL:	DW	0
D.ACTUAL:	DW	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INPUT: (ACPAGE) = ACTION PAGE
;	(DPPAGE) = DISPLAY PAGE

	CSEG
	PUBLIC	NEWFRAME
	EXTRN	ENGINE,SETPAGE,VDPSYNC

NEWFRAME:
	LD	HL,ERASE
	CALL	FOREACH		;RESTORE BACKGROUND OF ALL THE MOBS
	CALL	DRAWMOBS	;DRAW THE MOBS
	CALL	ENGINE
	CALL	VDPSYNC		;WAIT TO THE VDP

	LD	HL,SHOW
	CALL	FOREACH		;UPDATE THE STATUS OF ALL THE MOBS
	LD	HL,ACPAGE
	LD	DE,DPPAGE
	LD	C,(HL)
	LD	A,(DE)
	EX	DE,HL
	LD	(HL),C		;SWAP THE PAGES
	LD	(DE),A
	EI
	HALT			;WAIT THE VBLANK
	JP	SETPAGE

	DSEG
BUFFER:		DS	MOB.SIZ * NR_MOBS
INDEXBUF:	DS	NR_MOBS * 2


