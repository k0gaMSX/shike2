	INCLUDE SHIKE2.INC
	INCLUDE BIOS.INC

TILEPAG		EQU	0
TILESPR		EQU	0
TILEPAT		EQU	0
PATTERNSPR	EQU	1
PATTERNPAT	EQU	4
PATTERNPAG	EQU	3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CSEG
	PUBLIC	EDITOR
	EXTRN  	HIDESPRITE,SETPAGE,SPRITE,COLORSPRITE,EXIT
EDITOR:
	LD	C,TILEPAT
	LD	DE,TILEGEN
	CALL	SPRITE		;TEMPORAL CALL
	LD	C,TILESPR
	LD	DE,TILECOL
	CALL	COLORSPRITE	;TEMPORAL CALL

	LD	C,PATTERNPAT
	LD	DE,PATTERNGEN
	CALL	SPRITE		;TEMPORARY CALL
	LD	C,PATTERNSPR
	LD	DE,PATTERNCOL
	CALL	COLORSPRITE	;TEMPORARY CALL

        LD	A,0FFH
	LD	(TILECOORD),A

	LD	A,TILEPAG
	LD	(ACPAGE),A
	LD	(DPPAGE),A
	CALL	SETPAGE
	CALL	GRID
	CALL	TILEMOV
	LD	C,TILESPR
	CALL	HIDESPRITE

	LD	A,PATTERNPAG
	LD	(DPPAGE),A
	CALL	SETPAGE
	CALL	PATTERNMOV
	JP	EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;		(ACPAGE) = PAGE
;		(FRGCLR) = FOREGROUND COLOR
	CSEG
	PUBLIC	GRID
	EXTRN	LINE,VDPSYNC

GRID:
	LD	IY,.GDATA

.GNEXT:	LD	D,(IY+0)		;LOAD NEXT LINE
	LD	E,(IY+1)
	LD	B,(IY+2)
	LD	C,(IY+3)

.GLINE:	PUSH	IY			;PAINT THE LINE
	PUSH	BC
	PUSH	DE
	CALL	LINE
	POP	DE
	POP	BC
	POP	IY

	LD	A,D			;CHECK IF WE HAVE TO PASS TO
	CP	(IY+4)			;NEXT ELEMENT OF THE TABLE
	JR	NZ,.GINC
	LD	A,E
	CP	(IY+5)
	JR	NZ,.GINC
	LD	A,B
	CP	(IY+6)
	JR	NZ,.GINC
	LD	A,C
	CP	(IY+7)
	JR	NZ,.GINC

	LD	DE,12			;PASS TO NEXT ELEMENT OF THE TABLE
	ADD	IY,DE
	LD	HL,.GDATAEND
	LD	E,IYL
	LD	D,IYU
	OR	A
	SBC	HL,DE
	JR	NZ,.GNEXT		;IS IT THE END?
	CALL	VDPSYNC			;IT IS THE END, WAIT TO THE VDP
	RET

.GINC:	LD	A,D			;USE THE INCREMENTS OF THE TABLE
	ADD	A,(IY+8)		;AND GET NEXT LINE
	LD	D,A
	LD	A,E
	ADD	A,(IY+9)
	LD	E,A
	LD	A,B
	ADD	A,(IY+10)
	LD	B,A
	LD	A,C
	ADD	A,(IY+11)
	LD	C,A
	JR	.GLINE


;	FROM   - X0   Y0  X1  Y1  - TO X2  Y2    X3  Y3   IX0 IY0 IX1 IY1
.GDATA:	DB	  0,  4,  255,131,      0, 84,  255,211,    0, 8,  0, 8
	DB	239,211,    0, 92,     15,211,    0,204,  -16, 0,  0, 8
	DB	  8,  0,  255,123,    248,  0,  255,  3,   16, 0,  0,-8
	DB	  0,  3,    7,  0,      0,123,  247,  0,    0, 8, 16, 0
	DB	  0,131,  255,  4,      0,211,  255, 84,    0, 8,  0, 8
	DB	 16,211,  255, 92,    240,211,  255,204,   16, 0,  0, 8
.GDATAEND:






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CSEG
	EXTRN	GETCHAR,PUTSPRITE

PATTERNMOV:
	LD	DE,0FFH

.PATLOOP:
	PUSH	DE
	LD	C,PATTERNSPR
	LD	B,PATTERNPAT
	CALL	PUTSPRITE
	CALL	GETCHAR
	POP	DE
	LD	BC,0

	CP	KB_ESC
	RET	Z
.PUP:
	CP	KB_UP
	JR	NZ,.PDOWN
	LD	C,-8
	JR	.PDONE
.PDOWN:
	CP	KB_DOWN
	JR	NZ,.PLEFT
	LD	C,8
	JR	.PDONE
.PLEFT:
	CP	KB_LEFT
	JR	NZ,.PRIGTH
	LD	B,-16
	JR	.PDONE
.PRIGTH:
	CP	KB_RIGTH
	JR	NZ,.PATLOOP
	LD	B,16

.PDONE:
	LD	A,E
	ADD	A,C
	LD	E,A
	LD	A,D
	ADD	A,B
	LD	D,A
	JR	.PATLOOP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CSEG
	EXTRN	GETCHAR,PUTSPRITE

TILEMOV:
	LD	DE,(TILECOORD)

.TILLOOP:
	PUSH	DE
	LD	C,TILESPR
	LD	B,TILEPAT
	CALL	PUTSPRITE
	CALL	GETCHAR
	POP	DE
	LD	BC,0

	CP	KB_ESC
	RET	Z
.TUP:
	CP	KB_UP
	JR	NZ,.TDOWN
	LD	C,-8
	LD	B,-16
	JR	.TDONE
.TDOWN:
	CP	KB_DOWN
	JR	NZ,.TLEFT
	LD	C,8
	LD	B,16
	JR	.TDONE
.TLEFT:
	CP	KB_LEFT
	JR	NZ,.TRIGTH
	LD	C,8
	LD	B,-16
	JR	.TDONE
.TRIGTH:
	CP	KB_RIGTH
	JR	NZ,.TILLOOP
	LD	C,-8
	LD	B,16

.TDONE:
	LD	A,E
	ADD	A,C
	LD	E,A
	LD	A,D
	ADD	A,B
	LD	D,A
	JR	.TILLOOP


PATTERNGEN:
	DB	0FFH,080H,080H,080H,080H,080H,080H,0FFH
	DB	000H,000H,000H,000H,000H,000H,000H,000H
	DB	0FFH,001H,001H,001H,001H,001H,001H,0FFH
	DB	000H,000H,000H,000H,000H,000H,000H,000H

TILEGEN:
	DB	003H,00CH,030H,0C0H,0C0H,030H,00CH,003H
	DB	000H,000H,000H,000H,000H,000H,000H,000H
	DB	0C0H,030H,00CH,003H,003H,00CH,030H,0C0H
	DB	000H,000H,000H,000H,000H,000H,000H,000H

TILECOL:
	DB	0CH,0CH,0CH,0CH,0CH,0CH,0CH,0CH
	DB	0CH,0CH,0CH,0CH,0CH,0CH,0CH,0CH

PATTERNCOL:
	DB	0CH,0CH,0CH,0CH,0CH,0CH,0CH,0CH
	DB	0CH,0CH,0CH,0CH,0CH,0CH,0CH,0CH

	DSEG

TILECOORD:	DW	0


